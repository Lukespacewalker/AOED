@typeparam TValue
@inherits InputBase<TValue>
@using System.Globalization
@implements IDisposable
<div class="form-group">
    <label for="@Id">@Header: </label>
    <input step="@_stepAttributeValue" type="number" @attributes="AdditionalAttributes" value="@CurrentValueAsString" id="@Id" class="@CssClass form-control"
           @onchange="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)" />
    <div class="validation-message">@_validationMessage</div>
</div>

@code {
    private static string _stepAttributeValue; // Null by default, so only allows whole numbers as per HTML spe
    /// <summary>
    /// Gets or sets the error message used when displaying an a parsing error.
    /// </summary>
    [Parameter] public string ParsingErrorMessage { get; set; } = "The {0} field must be a number.";

    [Parameter] public string Header { get; set; }
    [Parameter] public string Id { get; set; }
    private string _validationMessage;

    protected override bool TryParseValueFromString(string value, out TValue result, out string validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue>(value, CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = string.Format(ParsingErrorMessage, FieldIdentifier.FieldName);
            return false;
        }
    }

    protected override void OnParametersSet()
    {
        EditContext.OnValidationStateChanged += EditContextOnOnValidationStateChanged;
        base.OnParametersSet();
    }

    private void EditContextOnOnValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        _validationMessage = string.Empty;
        foreach (var message in EditContext.GetValidationMessages(FieldIdentifier))
        {
            _validationMessage += message;
        }
    }

    void IDisposable.Dispose()
    {
        EditContext.OnValidationStateChanged -= EditContextOnOnValidationStateChanged;
        Dispose(disposing: true);
    }

    /// <summary>
    /// Formats the value as a string. Derived classes can override this to determine the formating used for <c>CurrentValueAsString</c>.
    /// </summary>
    /// <param name="value">The value to format.</param>
    /// <returns>A string representation of the value.</returns>
    protected override string FormatValueAsString(TValue value)
    {
        // Avoiding a cast to IFormattable to avoid boxing.
        switch (value)
        {
            case null:
                return null;

            case int @int:
                return BindConverter.FormatValue(@int, CultureInfo.InvariantCulture);

            case long @long:
                return BindConverter.FormatValue(@long, CultureInfo.InvariantCulture);

            case float @float:
                return BindConverter.FormatValue(@float, CultureInfo.InvariantCulture);

            case double @double:
                return BindConverter.FormatValue(@double, CultureInfo.InvariantCulture);

            case decimal @decimal:
                return BindConverter.FormatValue(@decimal, CultureInfo.InvariantCulture);

            default:
                throw new InvalidOperationException($"Unsupported type {value.GetType()}");
        }
    }

}